/* tslint:disable */
/* eslint-disable */
/**
 * Full Stack operation API
 * API for managing daily traffic records
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BulkUpdateTraffic200Response
 */
export interface BulkUpdateTraffic200Response {
    /**
     * Number of entries updated
     * @type {number}
     * @memberof BulkUpdateTraffic200Response
     */
    'updated'?: number;
}
/**
 * A new traffic entry to be created or updated
 * @export
 * @interface NewTraffic
 */
export interface NewTraffic {
    /**
     * 
     * @type {string}
     * @memberof NewTraffic
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof NewTraffic
     */
    'visits': number;
}
/**
 * Paginated traffic entries
 * @export
 * @interface PaginationTraffic
 */
export interface PaginationTraffic {
    /**
     * 
     * @type {Array<Traffic>}
     * @memberof PaginationTraffic
     */
    'data': Array<Traffic>;
    /**
     * 
     * @type {number}
     * @memberof PaginationTraffic
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationTraffic
     */
    'totalItems': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationTraffic
     */
    'totalPages': number;
}
/**
 * A traffic entry with an ID
 * @export
 * @interface Traffic
 */
export interface Traffic {
    /**
     * 
     * @type {string}
     * @memberof Traffic
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Traffic
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof Traffic
     */
    'visits': number;
}

/**
 * TrafficApi - axios parameter creator
 * @export
 */
export const TrafficApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create multiple traffic entries
         * @param {Array<NewTraffic>} newTraffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTraffic: async (newTraffic: Array<NewTraffic>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newTraffic' is not null or undefined
            assertParamExists('bulkCreateTraffic', 'newTraffic', newTraffic)
            const localVarPath = `/traffic/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTraffic, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update multiple traffic entries
         * @param {Array<Traffic>} traffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateTraffic: async (traffic: Array<Traffic>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traffic' is not null or undefined
            assertParamExists('bulkUpdateTraffic', 'traffic', traffic)
            const localVarPath = `/traffic/bulk/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traffic, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new traffic entry
         * @param {NewTraffic} newTraffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTraffic: async (newTraffic: NewTraffic, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newTraffic' is not null or undefined
            assertParamExists('createTraffic', 'newTraffic', newTraffic)
            const localVarPath = `/traffic/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTraffic, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a traffic entry by ID
         * @param {string} id Entry ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTraffic: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTraffic', 'id', id)
            const localVarPath = `/traffic/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all traffic entries
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {GetAllTrafficSortKeyEnum} [sortKey] Field to sort by
         * @param {GetAllTrafficSortDirectionEnum} [sortDirection] Sort direction
         * @param {string} [filters] JSON stringified filter object (e.g., {\&quot;minVisits\&quot;:10,\&quot;maxVisits\&quot;:100,\&quot;fromDate\&quot;:\&quot;2024-01-01\&quot;})
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTraffic: async (page?: number, limit?: number, sortKey?: GetAllTrafficSortKeyEnum, sortDirection?: GetAllTrafficSortDirectionEnum, filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traffic/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortKey !== undefined) {
                localVarQueryParameter['sortKey'] = sortKey;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a traffic entry by ID
         * @param {string} id Entry ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrafficById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrafficById', 'id', id)
            const localVarPath = `/traffic/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a traffic entry by ID
         * @param {string} id Entry ID
         * @param {NewTraffic} newTraffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTraffic: async (id: string, newTraffic: NewTraffic, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTraffic', 'id', id)
            // verify required parameter 'newTraffic' is not null or undefined
            assertParamExists('updateTraffic', 'newTraffic', newTraffic)
            const localVarPath = `/traffic/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTraffic, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrafficApi - functional programming interface
 * @export
 */
export const TrafficApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrafficApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create multiple traffic entries
         * @param {Array<NewTraffic>} newTraffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateTraffic(newTraffic: Array<NewTraffic>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Traffic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateTraffic(newTraffic, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrafficApi.bulkCreateTraffic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update multiple traffic entries
         * @param {Array<Traffic>} traffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUpdateTraffic(traffic: Array<Traffic>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkUpdateTraffic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUpdateTraffic(traffic, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrafficApi.bulkUpdateTraffic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new traffic entry
         * @param {NewTraffic} newTraffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTraffic(newTraffic: NewTraffic, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Traffic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTraffic(newTraffic, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrafficApi.createTraffic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a traffic entry by ID
         * @param {string} id Entry ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTraffic(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTraffic(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrafficApi.deleteTraffic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all traffic entries
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {GetAllTrafficSortKeyEnum} [sortKey] Field to sort by
         * @param {GetAllTrafficSortDirectionEnum} [sortDirection] Sort direction
         * @param {string} [filters] JSON stringified filter object (e.g., {\&quot;minVisits\&quot;:10,\&quot;maxVisits\&quot;:100,\&quot;fromDate\&quot;:\&quot;2024-01-01\&quot;})
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTraffic(page?: number, limit?: number, sortKey?: GetAllTrafficSortKeyEnum, sortDirection?: GetAllTrafficSortDirectionEnum, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationTraffic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTraffic(page, limit, sortKey, sortDirection, filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrafficApi.getAllTraffic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a traffic entry by ID
         * @param {string} id Entry ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrafficById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Traffic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrafficById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrafficApi.getTrafficById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a traffic entry by ID
         * @param {string} id Entry ID
         * @param {NewTraffic} newTraffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTraffic(id: string, newTraffic: NewTraffic, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Traffic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTraffic(id, newTraffic, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrafficApi.updateTraffic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TrafficApi - factory interface
 * @export
 */
export const TrafficApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrafficApiFp(configuration)
    return {
        /**
         * 
         * @summary Create multiple traffic entries
         * @param {Array<NewTraffic>} newTraffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTraffic(newTraffic: Array<NewTraffic>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Traffic>> {
            return localVarFp.bulkCreateTraffic(newTraffic, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update multiple traffic entries
         * @param {Array<Traffic>} traffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateTraffic(traffic: Array<Traffic>, options?: RawAxiosRequestConfig): AxiosPromise<BulkUpdateTraffic200Response> {
            return localVarFp.bulkUpdateTraffic(traffic, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new traffic entry
         * @param {NewTraffic} newTraffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTraffic(newTraffic: NewTraffic, options?: RawAxiosRequestConfig): AxiosPromise<Traffic> {
            return localVarFp.createTraffic(newTraffic, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a traffic entry by ID
         * @param {string} id Entry ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTraffic(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTraffic(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all traffic entries
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {GetAllTrafficSortKeyEnum} [sortKey] Field to sort by
         * @param {GetAllTrafficSortDirectionEnum} [sortDirection] Sort direction
         * @param {string} [filters] JSON stringified filter object (e.g., {\&quot;minVisits\&quot;:10,\&quot;maxVisits\&quot;:100,\&quot;fromDate\&quot;:\&quot;2024-01-01\&quot;})
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTraffic(page?: number, limit?: number, sortKey?: GetAllTrafficSortKeyEnum, sortDirection?: GetAllTrafficSortDirectionEnum, filters?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginationTraffic> {
            return localVarFp.getAllTraffic(page, limit, sortKey, sortDirection, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a traffic entry by ID
         * @param {string} id Entry ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrafficById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Traffic> {
            return localVarFp.getTrafficById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a traffic entry by ID
         * @param {string} id Entry ID
         * @param {NewTraffic} newTraffic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTraffic(id: string, newTraffic: NewTraffic, options?: RawAxiosRequestConfig): AxiosPromise<Traffic> {
            return localVarFp.updateTraffic(id, newTraffic, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrafficApi - object-oriented interface
 * @export
 * @class TrafficApi
 * @extends {BaseAPI}
 */
export class TrafficApi extends BaseAPI {
    /**
     * 
     * @summary Create multiple traffic entries
     * @param {Array<NewTraffic>} newTraffic 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficApi
     */
    public bulkCreateTraffic(newTraffic: Array<NewTraffic>, options?: RawAxiosRequestConfig) {
        return TrafficApiFp(this.configuration).bulkCreateTraffic(newTraffic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update multiple traffic entries
     * @param {Array<Traffic>} traffic 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficApi
     */
    public bulkUpdateTraffic(traffic: Array<Traffic>, options?: RawAxiosRequestConfig) {
        return TrafficApiFp(this.configuration).bulkUpdateTraffic(traffic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new traffic entry
     * @param {NewTraffic} newTraffic 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficApi
     */
    public createTraffic(newTraffic: NewTraffic, options?: RawAxiosRequestConfig) {
        return TrafficApiFp(this.configuration).createTraffic(newTraffic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a traffic entry by ID
     * @param {string} id Entry ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficApi
     */
    public deleteTraffic(id: string, options?: RawAxiosRequestConfig) {
        return TrafficApiFp(this.configuration).deleteTraffic(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all traffic entries
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {GetAllTrafficSortKeyEnum} [sortKey] Field to sort by
     * @param {GetAllTrafficSortDirectionEnum} [sortDirection] Sort direction
     * @param {string} [filters] JSON stringified filter object (e.g., {\&quot;minVisits\&quot;:10,\&quot;maxVisits\&quot;:100,\&quot;fromDate\&quot;:\&quot;2024-01-01\&quot;})
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficApi
     */
    public getAllTraffic(page?: number, limit?: number, sortKey?: GetAllTrafficSortKeyEnum, sortDirection?: GetAllTrafficSortDirectionEnum, filters?: string, options?: RawAxiosRequestConfig) {
        return TrafficApiFp(this.configuration).getAllTraffic(page, limit, sortKey, sortDirection, filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a traffic entry by ID
     * @param {string} id Entry ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficApi
     */
    public getTrafficById(id: string, options?: RawAxiosRequestConfig) {
        return TrafficApiFp(this.configuration).getTrafficById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a traffic entry by ID
     * @param {string} id Entry ID
     * @param {NewTraffic} newTraffic 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficApi
     */
    public updateTraffic(id: string, newTraffic: NewTraffic, options?: RawAxiosRequestConfig) {
        return TrafficApiFp(this.configuration).updateTraffic(id, newTraffic, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAllTrafficSortKeyEnum = {
    Date: 'date',
    Visits: 'visits',
    Id: 'id'
} as const;
export type GetAllTrafficSortKeyEnum = typeof GetAllTrafficSortKeyEnum[keyof typeof GetAllTrafficSortKeyEnum];
/**
 * @export
 */
export const GetAllTrafficSortDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetAllTrafficSortDirectionEnum = typeof GetAllTrafficSortDirectionEnum[keyof typeof GetAllTrafficSortDirectionEnum];


